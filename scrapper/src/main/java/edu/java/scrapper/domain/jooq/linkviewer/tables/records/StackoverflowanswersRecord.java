/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.linkviewer.tables.records;


import edu.java.scrapper.domain.jooq.linkviewer.tables.Stackoverflowanswers;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StackoverflowanswersRecord extends UpdatableRecordImpl<StackoverflowanswersRecord> implements Record3<String, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.NAME</code>.
     */
    public void setName(@Nullable String value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.NAME</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.ANSWER_ID</code>.
     */
    public void setAnswerId(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.ANSWER_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getAnswerId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.QUESTION_ID</code>.
     */
    public void setQuestionId(@Nullable Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.QUESTION_ID</code>.
     */
    @Nullable
    public Long getQuestionId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<String, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row3<String, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return Stackoverflowanswers.STACKOVERFLOWANSWERS.NAME;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return Stackoverflowanswers.STACKOVERFLOWANSWERS.ANSWER_ID;
    }

    @Override
    @NotNull
    public Field<Long> field3() {
        return Stackoverflowanswers.STACKOVERFLOWANSWERS.QUESTION_ID;
    }

    @Override
    @Nullable
    public String component1() {
        return getName();
    }

    @Override
    @NotNull
    public Long component2() {
        return getAnswerId();
    }

    @Override
    @Nullable
    public Long component3() {
        return getQuestionId();
    }

    @Override
    @Nullable
    public String value1() {
        return getName();
    }

    @Override
    @NotNull
    public Long value2() {
        return getAnswerId();
    }

    @Override
    @Nullable
    public Long value3() {
        return getQuestionId();
    }

    @Override
    @NotNull
    public StackoverflowanswersRecord value1(@Nullable String value) {
        setName(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowanswersRecord value2(@NotNull Long value) {
        setAnswerId(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowanswersRecord value3(@Nullable Long value) {
        setQuestionId(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowanswersRecord values(@Nullable String value1, @NotNull Long value2, @Nullable Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StackoverflowanswersRecord
     */
    public StackoverflowanswersRecord() {
        super(Stackoverflowanswers.STACKOVERFLOWANSWERS);
    }

    /**
     * Create a detached, initialised StackoverflowanswersRecord
     */
    @ConstructorProperties({ "name", "answerId", "questionId" })
    public StackoverflowanswersRecord(@Nullable String name, @NotNull Long answerId, @Nullable Long questionId) {
        super(Stackoverflowanswers.STACKOVERFLOWANSWERS);

        setName(name);
        setAnswerId(answerId);
        setQuestionId(questionId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StackoverflowanswersRecord
     */
    public StackoverflowanswersRecord(edu.java.scrapper.domain.jooq.linkviewer.tables.pojos.Stackoverflowanswers value) {
        super(Stackoverflowanswers.STACKOVERFLOWANSWERS);

        if (value != null) {
            setName(value.getName());
            setAnswerId(value.getAnswerId());
            setQuestionId(value.getQuestionId());
            resetChangedOnNotNull();
        }
    }
}
