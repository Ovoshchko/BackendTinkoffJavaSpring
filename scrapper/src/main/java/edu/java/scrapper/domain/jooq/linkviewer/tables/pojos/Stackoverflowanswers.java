/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.linkviewer.tables.pojos;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.io.Serializable;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.Nullable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Stackoverflowanswers implements Serializable {

    private static final long serialVersionUID = 1L;

    private String name;
    private Long answerId;
    private Long questionId;

    public Stackoverflowanswers() {}

    public Stackoverflowanswers(Stackoverflowanswers value) {
        this.name = value.name;
        this.answerId = value.answerId;
        this.questionId = value.questionId;
    }

    @ConstructorProperties({ "name", "answerId", "questionId" })
    public Stackoverflowanswers(
        @Nullable String name,
        @Nullable Long answerId,
        @Nullable Long questionId
    ) {
        this.name = name;
        this.answerId = answerId;
        this.questionId = questionId;
    }

    /**
     * Getter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.NAME</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.NAME</code>.
     */
    public void setName(@Nullable String name) {
        this.name = name;
    }

    /**
     * Getter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.ANSWER_ID</code>.
     */
    @Nullable
    public Long getAnswerId() {
        return this.answerId;
    }

    /**
     * Setter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.ANSWER_ID</code>.
     */
    public void setAnswerId(@Nullable Long answerId) {
        this.answerId = answerId;
    }

    /**
     * Getter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.QUESTION_ID</code>.
     */
    @Nullable
    public Long getQuestionId() {
        return this.questionId;
    }

    /**
     * Setter for <code>LINKVIEWER.STACKOVERFLOWANSWERS.QUESTION_ID</code>.
     */
    public void setQuestionId(@Nullable Long questionId) {
        this.questionId = questionId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Stackoverflowanswers other = (Stackoverflowanswers) obj;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.answerId == null) {
            if (other.answerId != null)
                return false;
        }
        else if (!this.answerId.equals(other.answerId))
            return false;
        if (this.questionId == null) {
            if (other.questionId != null)
                return false;
        }
        else if (!this.questionId.equals(other.questionId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.answerId == null) ? 0 : this.answerId.hashCode());
        result = prime * result + ((this.questionId == null) ? 0 : this.questionId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Stackoverflowanswers (");

        sb.append(name);
        sb.append(", ").append(answerId);
        sb.append(", ").append(questionId);

        sb.append(")");
        return sb.toString();
    }
}
