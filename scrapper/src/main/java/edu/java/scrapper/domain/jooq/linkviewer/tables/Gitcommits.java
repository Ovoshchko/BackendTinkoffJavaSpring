/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.linkviewer.tables;


import edu.java.scrapper.domain.jooq.linkviewer.Keys;
import edu.java.scrapper.domain.jooq.linkviewer.Linkviewer;
import edu.java.scrapper.domain.jooq.linkviewer.tables.records.GitcommitsRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Gitcommits extends TableImpl<GitcommitsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LINKVIEWER.GITCOMMITS</code>
     */
    public static final Gitcommits GITCOMMITS = new Gitcommits();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<GitcommitsRecord> getRecordType() {
        return GitcommitsRecord.class;
    }

    /**
     * The column <code>LINKVIEWER.GITCOMMITS.NAME</code>.
     */
    public final TableField<GitcommitsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>LINKVIEWER.GITCOMMITS.MADE_DATE</code>.
     */
    public final TableField<GitcommitsRecord, LocalDateTime> MADE_DATE = createField(DSL.name("MADE_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>LINKVIEWER.GITCOMMITS.URL</code>.
     */
    public final TableField<GitcommitsRecord, String> URL = createField(DSL.name("URL"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>LINKVIEWER.GITCOMMITS.COMMENT_NUMBER</code>.
     */
    public final TableField<GitcommitsRecord, Long> COMMENT_NUMBER = createField(DSL.name("COMMENT_NUMBER"), SQLDataType.BIGINT, this, "");

    private Gitcommits(Name alias, Table<GitcommitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gitcommits(Name alias, Table<GitcommitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LINKVIEWER.GITCOMMITS</code> table reference
     */
    public Gitcommits(String alias) {
        this(DSL.name(alias), GITCOMMITS);
    }

    /**
     * Create an aliased <code>LINKVIEWER.GITCOMMITS</code> table reference
     */
    public Gitcommits(Name alias) {
        this(alias, GITCOMMITS);
    }

    /**
     * Create a <code>LINKVIEWER.GITCOMMITS</code> table reference
     */
    public Gitcommits() {
        this(DSL.name("GITCOMMITS"), null);
    }

    public <O extends Record> Gitcommits(Table<O> child, ForeignKey<O, GitcommitsRecord> key) {
        super(child, key, GITCOMMITS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Linkviewer.LINKVIEWER;
    }

    @Override
    @NotNull
    public UniqueKey<GitcommitsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    @NotNull
    public Gitcommits as(String alias) {
        return new Gitcommits(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Gitcommits as(Name alias) {
        return new Gitcommits(alias, this);
    }

    @Override
    @NotNull
    public Gitcommits as(Table<?> alias) {
        return new Gitcommits(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Gitcommits rename(String name) {
        return new Gitcommits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Gitcommits rename(Name name) {
        return new Gitcommits(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Gitcommits rename(Table<?> name) {
        return new Gitcommits(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<String, LocalDateTime, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super LocalDateTime, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super LocalDateTime, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
