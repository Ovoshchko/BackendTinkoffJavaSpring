/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.linkviewer;


import edu.java.scrapper.domain.jooq.linkviewer.tables.Gitcommits;
import edu.java.scrapper.domain.jooq.linkviewer.tables.Links;
import edu.java.scrapper.domain.jooq.linkviewer.tables.Stackoverflowanswers;
import edu.java.scrapper.domain.jooq.linkviewer.tables.Userlink;
import edu.java.scrapper.domain.jooq.linkviewer.tables.Users;
import edu.java.scrapper.domain.jooq.linkviewer.tables.records.GitcommitsRecord;
import edu.java.scrapper.domain.jooq.linkviewer.tables.records.LinksRecord;
import edu.java.scrapper.domain.jooq.linkviewer.tables.records.StackoverflowanswersRecord;
import edu.java.scrapper.domain.jooq.linkviewer.tables.records.UserlinkRecord;
import edu.java.scrapper.domain.jooq.linkviewer.tables.records.UsersRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * LINKVIEWER.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<GitcommitsRecord> CONSTRAINT_8 = Internal.createUniqueKey(Gitcommits.GITCOMMITS, DSL.name("CONSTRAINT_8"), new TableField[] { Gitcommits.GITCOMMITS.URL }, true);
    public static final UniqueKey<LinksRecord> CONSTRAINT_45 = Internal.createUniqueKey(Links.LINKS, DSL.name("CONSTRAINT_45"), new TableField[] { Links.LINKS.ID }, true);
    public static final UniqueKey<LinksRecord> CONSTRAINT_451 = Internal.createUniqueKey(Links.LINKS, DSL.name("CONSTRAINT_451"), new TableField[] { Links.LINKS.URL }, true);
    public static final UniqueKey<StackoverflowanswersRecord> CONSTRAINT_4F = Internal.createUniqueKey(Stackoverflowanswers.STACKOVERFLOWANSWERS, DSL.name("CONSTRAINT_4F"), new TableField[] { Stackoverflowanswers.STACKOVERFLOWANSWERS.ANSWER_ID }, true);
    public static final UniqueKey<UsersRecord> CONSTRAINT_4 = Internal.createUniqueKey(Users.USERS, DSL.name("CONSTRAINT_4"), new TableField[] { Users.USERS.TG_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<UserlinkRecord, UsersRecord> CONSTRAINT_1 = Internal.createForeignKey(Userlink.USERLINK, DSL.name("CONSTRAINT_1"), new TableField[] { Userlink.USERLINK.USER_ID }, Keys.CONSTRAINT_4, new TableField[] { Users.USERS.TG_ID }, true);
    public static final ForeignKey<UserlinkRecord, LinksRecord> CONSTRAINT_1E = Internal.createForeignKey(Userlink.USERLINK, DSL.name("CONSTRAINT_1E"), new TableField[] { Userlink.USERLINK.LINK_ID }, Keys.CONSTRAINT_45, new TableField[] { Links.LINKS.ID }, true);
}
